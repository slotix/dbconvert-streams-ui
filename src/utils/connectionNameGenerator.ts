import type { Connection } from '@/types/connections'

/**
 * Generates a connection name based on connection parameters
 */
export function generateConnectionName(connection: Connection): string {
  const { type, host, port, database, username } = connection
  
  // If we have a custom name already, keep it
  if (connection.name && connection.name.trim() && !isAutoGeneratedName(connection.name)) {
    return connection.name
  }

  // Generate name based on available parameters
  let nameParts: string[] = []
  
  // Add database type
  if (type) {
    nameParts.push(type)
  }

  // Add meaningful connection identifier
  if (host && host !== 'localhost' && host !== '127.0.0.1') {
    // Use host for remote connections
    nameParts.push(host)
  } else if (database) {
    // Use database name for local connections
    nameParts.push(database)
  } else if (username) {
    // Fall back to username
    nameParts.push(username)
  }

  // Add port if it's not the default port
  if (port && !isDefaultPort(type, port)) {
    nameParts.push(`:${port}`)
  }

  // If we have parts, join them
  if (nameParts.length > 0) {
    return nameParts.join(' ')
  }

  // Final fallback
  return type ? `My ${type} Connection` : 'My Database Connection'
}

/**
 * Checks if a name appears to be auto-generated
 */
function isAutoGeneratedName(name: string): boolean {
  return name.startsWith('My ') && name.endsWith(' Connection')
}

/**
 * Checks if the port is the default port for the database type
 */
function isDefaultPort(type: string, port: number): boolean {
  const defaultPorts: Record<string, number> = {
    'PostgreSQL': 5432,
    'MySQL': 3306,
    'MariaDB': 3306,
    'MongoDB': 27017,
    'Redis': 6379,
    'SQLite': 0, // SQLite doesn't use ports
    'SQL Server': 1433,
    'Oracle': 1521
  }

  return defaultPorts[type] === port
}

/**
 * Updates connection name if it should be auto-generated
 */
export function updateAutoGeneratedName(connection: Connection): void {
  if (!connection.name || isAutoGeneratedName(connection.name)) {
    connection.name = generateConnectionName(connection)
  }
}